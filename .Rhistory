rm(list=ls()) #clear and close everything open
library(tidyverse)
library(sf)
library(raster)
library(SciViews)
kenya_survey_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Kenya HH Survey 2018_choicetext.csv", na.strings=c("","NA"))
kenya_survey_raw = kenya_survey_raw[-(1:2),] #remove the first two rows from qualtrics
kenya_survey_useful <- select(kenya_survey_raw, ResponseId, X1.4, X1.3)
colnames(kenya_survey_useful) <- c("ResponseId", "long", "lat") #rename columns
kenya_survey_useful <- kenya_survey_useful[complete.cases(kenya_survey_useful), ] #keep complete cases (no missing)
kenya_survey_useful <- select(kenya_survey_raw, ResponseId, X1.4, X1.3)
kenya_survey_useful <- dplyr::select(kenya_survey_raw, ResponseId, X1.4, X1.3)
colnames(kenya_survey_useful) <- c("ResponseId", "long", "lat") #rename columns
kenya_survey_useful <- kenya_survey_useful[complete.cases(kenya_survey_useful), ] #keep complete cases (no missing)
kenya_survey_sf <- st_as_sf(x = kenya_survey_useful, # chaning gps locations to a spatial object
coords = c("long", "lat"))
plot(kenya_survey_sf) #plot to check points are distributed correctly, abstract for the time being.
##### Make a bounding box to remove the incorrect GPS locations ####
bb <- c(36.8, -0.25, 37.5, 0.3)
names(bb) = c("xmin", "ymin", "xmax", "ymax")
attr(bb, "class") = "bbox"
bpoly <- st_as_sfc(bb)
# Crop the  data with this polygon
cropped_kenya_survey_sf <- st_intersection(kenya_survey_sf, bpoly)
plot(cropped_kenya_survey_sf) #plot to check the cropping worked!
#change to projected coordinate system
cropped_kenya_survey_sf <- st_set_crs(cropped_kenya_survey_sf, 4326)
utm_kenya_survey <- st_as_sf(cropped_kenya_survey_sf) %>% st_transform(32637)
#buffer points by 1km
utm_kenya_survey_1kbuff <- st_buffer(utm_kenya_survey, 1000)
plot(utm_kenya_survey_1kbuff) #plot to check!
pop_2000 <- raster("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Population Data/WorldPop/ken_pd_2000_1km.tif")
hh_pop_2000 <- raster::extract(x=pop_2000, y=utm_kenya_survey_1kbuff, method = 'simple', fun=sum, df=TRUE)
hh_pop_2000$ID <- utm_kenya_survey_1kbuff$ResponseId
pop_2018 <- raster("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Population Data/WorldPop/ken_pd_2018_1km.tif")
hh_pop_2018 <- raster::extract(x=pop_2018, y=utm_kenya_survey_1kbuff, method = 'simple', fun=sum, df=TRUE)
hh_pop_2018$ID <- utm_kenya_survey_1kbuff$ResponseId
#### Merge 2000 and 2018 together ####
kenya_hh_pop_change <- merge(hh_pop_2000, hh_pop_2018, by="ID")
#### Calculate Log Pop Change #####
kenya_hh_pop_change$log_perc_Change_00_18 <- ((ln(kenya_hh_pop_change$ken_pd_2018_1km) - ln(kenya_hh_pop_change$ken_pd_2000_1km)) / 18) * 100
#### Plot Figs ####
ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth 2000-2018 (%)", y = "Count")
kenya_survey_sf <- merge(kenya_survey_sf, kenya_hh_pop_change, by.x = "ResponseId", by.y = "ID")
ggplot(kenya_survey_sf, aes(color = log_perc_Change_00_18)) +
geom_sf() +
theme_bw()
rm(list=ls()) #clear and close everything open
library(tidyverse)
library(sf)
library(raster)
library(SciViews)
kenya_survey_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Kenya HH Survey 2018_choicetext.csv", na.strings=c("","NA"))
kenya_survey_raw = kenya_survey_raw[-(1:2),] #remove the first two rows from qualtrics
kenya_survey_useful <- dplyr::select(kenya_survey_raw, ResponseId, X1.4, X1.3)
colnames(kenya_survey_useful) <- c("ResponseId", "long", "lat") #rename columns
kenya_survey_useful <- kenya_survey_useful[complete.cases(kenya_survey_useful), ] #keep complete cases (no missing)
kenya_survey_sf <- st_as_sf(x = kenya_survey_useful, # chaning gps locations to a spatial object
coords = c("long", "lat"))
plot(kenya_survey_sf) #plot to check points are distributed correctly, abstract for the time being.
pop_2000 <- raster("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Population Data/WorldPop/ken_pd_2000_1km.tif")
hh_pop_2000 <- raster::extract(x=pop_2000, y=utm_kenya_survey_1kbuff, method = 'simple', fun=sum, df=TRUE)
hh_pop_2000$ID <- utm_kenya_survey_1kbuff$ResponseId
pop_2018 <- raster("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Population Data/WorldPop/ken_pd_2018_1km.tif")
hh_pop_2018 <- raster::extract(x=pop_2018, y=utm_kenya_survey_1kbuff, method = 'simple', fun=sum, df=TRUE)
hh_pop_2018$ID <- utm_kenya_survey_1kbuff$ResponseId
hh_pop_2000 <- raster::extract(x=pop_2000, y=kenya_survey_sf,
buffer = 1000, fun = sum, df = TRUE)
hh_pop_2000$ID <- kenya_survey_sf$ResponseId
pop_2018 <- raster("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Population Data/WorldPop/ken_pd_2018_1km.tif")
hh_pop_2000 <- raster::extract(x=pop_2018, y=kenya_survey_sf,
buffer = 1000, fun = sum, df = TRUE)
hh_pop_2018 <- raster::extract(x=pop_2018, y=kenya_survey_sf,
buffer = 1000, fun = sum, df = TRUE)
hh_pop_2018$ID <- kenya_survey_sf$ResponseId
#### Merge 2000 and 2018 together ####
kenya_hh_pop_change <- merge(hh_pop_2000, hh_pop_2018, by="ID")
#### Calculate Log Pop Change #####
kenya_hh_pop_change$log_perc_Change_00_18 <- ((ln(kenya_hh_pop_change$ken_pd_2018_1km) - ln(kenya_hh_pop_change$ken_pd_2000_1km)) / 18) * 100
#### Plot Figs ####
ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth 2000-2018 (%)", y = "Count")
kenya_survey_sf <- merge(kenya_survey_sf, kenya_hh_pop_change, by.x = "ResponseId", by.y = "ID")
ggplot(kenya_survey_sf, aes(color = log_perc_Change_00_18)) +
geom_sf() +
theme_bw()
#### Plot Figs ####
ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth 2000-2018 (%)", y = "Count")
#1 - histogram of population in 2000
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count")
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count")
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count") +
scale_x_continuous(limits = c(0,20000))
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count") +
scale_x_continuous(limits = c(0,18000))
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count") +
scale_x_continuous(limits = c(0,19000))
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count") +
scale_x_continuous(limits = c(0,20000))
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count") +
scale_x_continuous(limits = c(0,250000))
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count") +
scale_x_continuous(limits = c(0,25000))
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count") +
scale_x_continuous(limits = c(0,18000))
#1 - histogram of population in 2000
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count") +
scale_x_continuous(limits = c(0,18000))
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population 2000", y = "Count") +
scale_x_continuous(limits = c(0,18000))
#1 - histogram of population in 2000
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2000") +
scale_x_continuous(limits = c(0,18000))
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2018") +
scale_x_continuous(limits = c(0,18000))
#1 - histogram of population in 2000
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2000") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2018") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#1 - histogram of population in 2000
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(bins = 10, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2000") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#1 - histogram of population in 2000
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2000") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#2 - histogram of population in 2018
ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2018") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#3 - histogram of pop change %
ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth 2000-2018 (%)", y = "Count")
#3 - histogram of pop change %
ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth 2000-2018 (%)", y = "Count") +
scale_x_continuous(limits = c(-2,10))
#3 - histogram of pop change %
ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth 2000-2018 (%)", y = "Count") +
scale_x_continuous(limits = c(-2,10), breaks = 1)
#3 - histogram of pop change %
ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth 2000-2018 (%)", y = "Count") +
scale_x_continuous(limits = c(-2,10), breaks = seq(-2,10, by=1))
library(ggarrange)
library(ggpubr)
#1 - histogram of population in 2000
ken_2000_plot <- ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2000") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#2 - histogram of population in 2018
ken_2018_plot <- ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2018") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#3 - histogram of pop change %
ken_growth_plot <- ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth 2000-2018 (%)", y = "Count") +
scale_x_continuous(limits = c(-2,10), breaks = seq(-2,10, by=1))
ggarrange(ggarrange(ken_2000_plot, ken_2018_plot, ncol = 2), ken_growth_plot, nrow = 2)
ggarrange(ggarrange(ken_2000_plot, ken_2018_plot, nrow = 1), ken_growth_plot, nrow = 2)
ggarrange(ggarrange(ken_2000_plot, ken_2018_plot, nrow = 1), ken_growth_plot, ncol = 2)
ggarrange(ggarrange(ken_2000_plot, ken_2018_plot, nrow = 2), ken_growth_plot, ncol = 2)
ggarrange(ggarrange(ken_2000_plot, ken_2018_plot, ncol = 2), ken_growth_plot, ncol = 2)
ggarrange(ggarrange(ken_2000_plot, ken_2018_plot, ncol = 2), ken_growth_plot, nrow = 2)
#1 - histogram of population in 2000
ken_2000_plot <- ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2000 - 1k buffer") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#2 - histogram of population in 2018
ken_2018_plot <- ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2018 - 1k buffer") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#3 - histogram of pop change %
ken_growth_plot <- ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth (%)", y = "Count", title = "2000-2018 1k buffer") +
scale_x_continuous(limits = c(-2,10), breaks = seq(-2,10, by=1))
#4 - subplot together
ggarrange(ggarrange(ken_2000_plot, ken_2018_plot, ncol = 2), ken_growth_plot, nrow = 2)
pop_2000 <- raster("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Population Data/WorldPop/ken_pd_2000_1km.tif")
hh_pop_2000 <- raster::extract(x=pop_2000, y=kenya_survey_sf,
buffer = 2000, fun = sum, df = TRUE)
hh_pop_2000$ID <- kenya_survey_sf$ResponseId
pop_2018 <- raster("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Population Data/WorldPop/ken_pd_2018_1km.tif")
hh_pop_2018 <- raster::extract(x=pop_2018, y=kenya_survey_sf,
buffer = 2000, fun = sum, df = TRUE)
hh_pop_2018$ID <- kenya_survey_sf$ResponseId
#### Merge 2000 and 2018 together ####
kenya_hh_pop_change <- merge(hh_pop_2000, hh_pop_2018, by="ID")
#### Calculate Log Pop Change #####
kenya_hh_pop_change$log_perc_Change_00_18 <- ((ln(kenya_hh_pop_change$ken_pd_2018_1km) - ln(kenya_hh_pop_change$ken_pd_2000_1km)) / 18) * 100
#1 - histogram of population in 2000
ken_2000_plot <- ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2000 - 2k buffer") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#2 - histogram of population in 2018
ken_2018_plot <- ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2018 - 2k buffer") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#3 - histogram of pop change %
ken_growth_plot <- ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth (%)", y = "Count", title = "2000-2018 2k buffer") +
scale_x_continuous(limits = c(-2,10), breaks = seq(-2,10, by=1))
#4 - subplot together
ggarrange(ggarrange(ken_2000_plot, ken_2018_plot, ncol = 2), ken_growth_plot, nrow = 2)
rm(list=ls()) #clear and close
library(googlesheets4)
library(tidyverse)
library(usmap)
library(dplyr)
library(urbnmapr)
library(tidygeocoder)
library(sf)
library(ggsflabel)
library(ggpubr)
library(scales)
library(cowplot)
library(viridis)
library(RColorBrewer)
googlesheets4::sheets_auth(email = "azimmer@email.arizona.edu")
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
city_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Cities")
# select useful columns for plotting by county FIPS and rename
county_npi_data <- dplyr::select(county_npi_data, "CTY_ST_FIPS", "State...7", "County", "Status", "Date Last Coded")
colnames(county_npi_data) <- c("fips", "state", "county", "status", "date_coded")
county_npi_data$status <- as.character(county_npi_data$status)
county_npi_data$date_coded <- as.Date(county_npi_data$date_coded)
#change last coded date to month/year only
county_npi_data$date_coded <- format(county_npi_data$date_coded, "%m/%Y")
#change date to categorical variable
county_npi_data$date_coded <- as.factor(county_npi_data$date_coded)
#reorder factor levels so they plot nicely in date order
county_npi_data$date_coded <- factor(county_npi_data$date_coded, levels = c("04/2020", "05/2020", "06/2020", "07/2020", "08/2020",
"09/2020", "10/2020", "11/2020", "12/2020", "01/2021",
"02/2021", "03/2021", "04/2021", "05/2021", "06/2021",
"07/2021", "08/2021", "09/2021", "10/2021", "11/2021",
"12/2021", "01/2022"))
rm(list=ls()) #clear and close
library(googlesheets4)
library(tidyverse)
library(usmap)
library(dplyr)
library(urbnmapr)
library(tidygeocoder)
library(sf)
library(ggsflabel)
library(ggpubr)
library(scales)
library(cowplot)
library(viridis)
library(RColorBrewer)
googlesheets4::sheets_auth(email = "azimmer@email.arizona.edu")
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
1
city_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Cities")
# select useful columns for plotting by county FIPS and rename
county_npi_data <- dplyr::select(county_npi_data, "CTY_ST_FIPS", "State...7", "County", "Status", "Date Last Coded")
colnames(county_npi_data) <- c("fips", "state", "county", "status", "date_coded")
county_npi_data$status <- as.character(county_npi_data$status)
county_npi_data$date_coded <- as.Date(county_npi_data$date_coded)
#change last coded date to month/year only
county_npi_data$date_coded <- format(county_npi_data$date_coded, "%m/%Y")
#change date to categorical variable
county_npi_data$date_coded <- as.factor(county_npi_data$date_coded)
#reorder factor levels so they plot nicely in date order
county_npi_data$date_coded <- factor(county_npi_data$date_coded, levels = c("04/2020", "05/2020", "06/2020", "07/2020", "08/2020",
"09/2020", "10/2020", "11/2020", "12/2020", "01/2021",
"02/2021", "03/2021", "04/2021", "05/2021", "06/2021",
"07/2021", "08/2021", "09/2021", "10/2021", "11/2021",
"12/2021", "01/2022", "02/2022"))
# Obtain county polygon data
states_sf <- get_urbn_map(map = "states", sf = TRUE)
counties_sf <- get_urbn_map(map = "counties", sf = TRUE)
# Merge polygonal data with coded data
counties_sf <- merge(counties_sf, county_npi_data, by.x = "county_fips", by.y = "fips")
# set colors for plot
nb.cols <- 18
mycolors <- colorRampPalette(brewer.pal(8, "RdYlGn"))(nb.cols)
# Plot county level data
county_plot <- ggplot() +
# Plot county data and fill with value
geom_sf(data=counties_sf, mapping = aes(fill = date_coded), color = 'grey65', size = 0.1) +
# Overlay State Outlines
geom_sf(data = states_sf, fill = NA, color = "grey20", size = 0.2) +
# Remove grid lines from plot
coord_sf(datum = NA) +
labs(fill = "Date Last Coded") +
theme(plot.background = element_rect(color = "NA"),
legend.background = element_rect(color = "NA"),
legend.position = "right", legend.key.height = unit(0.7, "cm")) +
scale_fill_manual(values = mycolors, na.value="grey")
county_plot
county_plot
# set colors for plot
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(8, "RdYlGn"))(nb.cols)
# Plot county level data
county_plot <- ggplot() +
# Plot county data and fill with value
geom_sf(data=counties_sf, mapping = aes(fill = date_coded), color = 'grey65', size = 0.1) +
# Overlay State Outlines
geom_sf(data = states_sf, fill = NA, color = "grey20", size = 0.2) +
# Remove grid lines from plot
coord_sf(datum = NA) +
labs(fill = "Date Last Coded") +
theme(plot.background = element_rect(color = "NA"),
legend.background = element_rect(color = "NA"),
legend.position = "right", legend.key.height = unit(0.7, "cm")) +
scale_fill_manual(values = mycolors, na.value="grey")
county_plot
rm(list=ls()) #clear and close everything open
library(tidyverse)
library(sf)
library(raster)
library(SciViews)
library(ggpubr)
##### Load Kenya Survey Data ####
kenya_survey_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Kenya HH Survey 2018_choicetext.csv", na.strings=c("","NA"))
kenya_survey_raw = kenya_survey_raw[-(1:2),] #remove the first two rows from qualtrics
### Extract useful data, HHID and GPS Locations and make it SF object####
kenya_survey_useful <- dplyr::select(kenya_survey_raw, ResponseId, X1.4, X1.3)
colnames(kenya_survey_useful) <- c("ResponseId", "long", "lat") #rename columns
kenya_survey_useful <- kenya_survey_useful[complete.cases(kenya_survey_useful), ] #keep complete cases (no missing)
kenya_survey_sf <- st_as_sf(x = kenya_survey_useful, # chaning gps locations to a spatial object
coords = c("long", "lat"))
plot(kenya_survey_sf) #plot to check points are distributed correctly, abstract for the time being.
##### Read in Population datset and exract pop values for 1k buffer ####
pop_2000 <- raster("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Population Data/WorldPop/ken_pd_2000_1km.tif")
hh_pop_2000 <- raster::extract(x=pop_2000, y=kenya_survey_sf,
buffer = 2000, fun = sum, df = TRUE)
hh_pop_2000$ID <- kenya_survey_sf$ResponseId
pop_2018 <- raster("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Population Data/WorldPop/ken_pd_2018_1km.tif")
hh_pop_2018 <- raster::extract(x=pop_2018, y=kenya_survey_sf,
buffer = 2000, fun = sum, df = TRUE)
hh_pop_2018$ID <- kenya_survey_sf$ResponseId
#### Merge 2000 and 2018 together ####
kenya_hh_pop_change <- merge(hh_pop_2000, hh_pop_2018, by="ID")
#### Calculate Log Pop Change #####
kenya_hh_pop_change$log_perc_Change_00_18 <- ((ln(kenya_hh_pop_change$ken_pd_2018_1km) - ln(kenya_hh_pop_change$ken_pd_2000_1km)) / 18) * 100
#### Plot Figs ####
#1 - histogram of population in 2000
ken_2000_plot <- ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2000 - 2k buffer") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#2 - histogram of population in 2018
ken_2018_plot <- ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2018 - 2k buffer") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#3 - histogram of pop change %
ken_growth_plot <- ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth (%)", y = "Count", title = "2000-2018 2k buffer") +
scale_x_continuous(limits = c(-2,10), breaks = seq(-2,10, by=1))
#4 - subplot together
ggarrange(ggarrange(ken_2000_plot, ken_2018_plot, ncol = 2), ken_growth_plot, nrow = 2)
View(kenya_hh_pop_change)
hh_pop_2000 <- raster::extract(x=pop_2000, y=kenya_survey_sf,
buffer = 1000, fun = sum, df = TRUE)
hh_pop_2000$ID <- kenya_survey_sf$ResponseId
pop_2018 <- raster("/Users/azimmer/Documents/PhD Geography/Research/Lopus-PopGrowth/Population Data/WorldPop/ken_pd_2018_1km.tif")
hh_pop_2018 <- raster::extract(x=pop_2018, y=kenya_survey_sf,
buffer = 1000, fun = sum, df = TRUE)
hh_pop_2018$ID <- kenya_survey_sf$ResponseId
#### Merge 2000 and 2018 together ####
kenya_hh_pop_change <- merge(hh_pop_2000, hh_pop_2018, by="ID")
#### Calculate Log Pop Change #####
kenya_hh_pop_change$log_perc_Change_00_18 <- ((ln(kenya_hh_pop_change$ken_pd_2018_1km) - ln(kenya_hh_pop_change$ken_pd_2000_1km)) / 18) * 100
#1 - histogram of population in 2000
ken_2000_plot <- ggplot(kenya_hh_pop_change, aes(x = ken_pd_2000_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2000 - 2k buffer") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#2 - histogram of population in 2018
ken_2018_plot <- ggplot(kenya_hh_pop_change, aes(x = ken_pd_2018_1km)) +
geom_histogram(bins = 50, color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "HH Buffer Population", y = "Count", title = "2018 - 2k buffer") +
scale_x_continuous(limits = c(0,18000)) +
scale_y_continuous(limits = c(0,300))
#3 - histogram of pop change %
ken_growth_plot <- ggplot(kenya_hh_pop_change, aes(x = log_perc_Change_00_18)) +
geom_histogram(color = "steelblue", fill = 'steelblue', alpha = 0.7) +
theme_bw() +
labs(x = "Population Growth (%)", y = "Count", title = "2000-2018 2k buffer") +
scale_x_continuous(limits = c(-2,10), breaks = seq(-2,10, by=1))
#4 - subplot together
ggarrange(ggarrange(ken_2000_plot, ken_2018_plot, ncol = 2), ken_growth_plot, nrow = 2)
kenya_survey_sf <- merge(kenya_survey_sf, kenya_hh_pop_change, by.x = "ResponseId", by.y = "ID")
