geom_tile(aes(fill = Price)) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Maize Price Analysis
# Andrew Zimmer
# March 2022
rm(list=ls()) #clear and close everything open
#### Loading Packages ####
library(tidyverse)
library(lubridate)
library(Amelia) #for multiple imputation
#### Loading Data ####
zambia_wfp_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/WFP Data/Raw/WFP_2022Feb28_Zambia_FoodPricesData.csv")
mozambique_wfp_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/WFP Data/Raw/WFP_2022Feb28_Mozambique_FoodPricesData.csv")
malawi_wfp_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/WFP Data/Raw/WFP_2022Feb28_Malawi_FoodPricesData.csv")
#### Merging WFP Data ####
complete_wfp_raw <- rbind(zambia_wfp_raw, mozambique_wfp_raw, malawi_wfp_raw)
unique(complete_wfp_raw$Market)
#### Make Datetime ####
complete_wfp_raw_date <- complete_wfp_raw %>%
select(Country, Admin.1, Market, Commodity, Year, Month, Price, Unit, Currency) %>%
mutate(date = make_date(Year, Month))
#### Extract Maize Prices (all types) ####
maize_wfp_raw <- complete_wfp_raw_date[grepl("Maize", complete_wfp_raw_date$Commodity), ]
#### Clean and retain useful data ####
#remove maize price with SOS currency (error from WFP?)
maize_wfp_raw<-maize_wfp_raw[!(maize_wfp_raw$Currency=="SOS"),]
#retain certain country / maize type pairings
maize_wfp_raw<-maize_wfp_raw[(maize_wfp_raw$Country=="Malawi" & maize_wfp_raw$Commodity == "Maize" |
maize_wfp_raw$Country=="Mozambique" & maize_wfp_raw$Commodity == "Maize (white)" |
maize_wfp_raw$Country=="Zambia" & maize_wfp_raw$Commodity == "Maize (white)"),]
#clip data to start in 2003 and to end in 2019 (most complete record across all three countries)
maize_wfp_raw<-maize_wfp_raw[(maize_wfp_raw$Year >= 2003),]
maize_wfp_raw<-maize_wfp_raw[(maize_wfp_raw$Year <= 2019),]
#plot the number of markets through time
test <- maize_wfp_raw %>%
group_by(Country, date) %>%
tally()
#plot the number of markets through time
ggplot(test, aes(x = date, y = n)) +
geom_line() +
facet_wrap(~Country) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Plot the maize price for each country through time, in local currency
ggplot(maize_wfp_raw, aes(x = date, y = Price, color = Commodity)) +
geom_line() +
facet_wrap(~Country) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "DATE", y = "PRICE /KG")
#### Calculate Data Availability for each market ####
# should be 204 observartions for each market (17 years)
# markets with > 100% of data available are errors, and will be removed from sample
maize_wfp_raw$Market <- as.character(maize_wfp_raw$Market)
unique(maize_wfp_raw$Market)
data_available <- maize_wfp_raw %>%
group_by(Country, Market) %>%
tally() %>%
mutate(percentage = (n/204)*100)
#### Filter data with 70-100% data available ####
useful_markets <-data_available[(data_available$percentage >=70 & data_available$percentage <=100),]
#keep only useful markets for imputation - this has 117 Markets
useful_wfp_data <- maize_wfp_raw %>%
filter(Market %in% useful_markets$Market)
#### Use Amelia for multiple imputation to complete record ####
#save csv from before with 117 markets and import this into Amelia window
useful_wfp_data <- useful_wfp_data %>%
select(Country, Market, Price, date)
#add an ascending time series variable
useful_wfp_data <- useful_wfp_data %>%
group_by(Market) %>%
mutate(Time = (month(date) - month(min(date)) + 12 * (year(date) - year(min(date)))+1))
write.csv(useful_wfp_data, "/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/WFP Data/Useful/useful_wfp_data.csv")
ggplot(useful_wfp_data, aes(x = date, y = Market)) +
geom_tile(aes(fill = Price)) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
a.out <- amelia(useful_wfp_data,
m=5,
ts="Time",
cs = "Market",
idvars = c("Country", "date"),
polytime = 2,
bound = rbind(c(Inf, 0, Inf)))
polytime = 2
View(a.out)
amelia(useful_wfp_data,
amelia(useful_wfp_data,
m=5,
ts="Time",
cs = "Market",
idvars = c("Country", "date"),
polytime = 2)
amelia(useful_wfp_data, m=5, ts="Time", cs = "Market")
amelia(useful_wfp_data, m=5, ts="Time", cs = "Market", idvars = c("Country", "date"), polytime = 2)
AmeliaView()
AmeliaView()
AmeliaView()
##### Load Packages ####
library(qualtRics)
library(tidyverse)
library(reshape2)
library(RColorBrewer)
library(rnaturalearth)
library(sf)
library(ggmap)
library(cowplot)
library(gridExtra)
rm(list=ls()) #clear and close everything open
#fetch survey from qualtrics API
raw_qualtrics <- fetch_survey(surveyID = "SV_0uCJH5o52aEWTfE", force_request = TRUE)
#fetch survey from qualtrics API
raw_qualtrics <- fetch_survey(surveyID = "SV_0uCJH5o52aEWTfE", force_request = TRUE)
namwala_hhid <- list(1452, 1454, 1456, 1457, 1458, 1459, 1461, 1463, 1467, 1469, 1472, 1475, 1476, 1478, 1480, 1485, 1486, 1487, 1489, 1495, 1496, 1497, 1503,
1504, 1505, 1508, 1513, 1514, 1518, 1521, 1522, 1523, 1525, 1527, 1528, 1532, 1533, 1534, 1535, 1538, 1539, 1540, 1542, 1543, 1544, 1546,
1555, 1556, 1558, 1560, 1625, 1632, 1676, 1679, 1684, 1685, 1686, 1687, 1688, 1689, 1692, 1693, 1451, 1453, 1455, 1460, 1462, 1464, 1465,
1466, 1468, 1470, 1471, 1473, 1474, 1477, 1479, 1481, 1482, 1483, 1484, 1488, 1494, 1498, 1499, 1500, 1501, 1502, 1506, 1507, 1509, 1510,
1511, 1512, 1515, 1516, 1517, 1519, 1520, 1524, 1526, 1529, 1530, 1531, 1536, 1537, 1541, 1545, 1557, 1559, 1619, 1620, 1621, 1622, 1623,
1624, 1673, 1674, 1675, 1677, 1678, 1680, 1681, 1682, 1683, 1690, 1691, 1694)
type(namwala_hhid)
class(namwala_hhid)
library(tidyverse)
GP1 <- read.csv("/Users/azimmer/Downloads/GP1.csv")
GP2 <- read.csv("/Users/azimmer/Downloads/GP2.csv")
View(GP1)
View(GP2)
GP2 %>%
rowwise() %>%
mutate(P1 = sum(x1_PT21_1_TEXT,x1_PT21_5_TEXT, na.rm = T)) %>%
mutate(P2 = sum(x2_PT21_1_TEXT,x2_PT21_5_TEXT, na.rm = T)) %>%
mutate(P3 = sum(x3_PT21_1_TEXT,x3_PT21_5_TEXT, na.rm = T)) %>%
mutate(P4 = sum(x4_PT21_1_TEXT,x4_PT21_5_TEXT, na.rm = T)) %>%
mutate(P5 = sum(x5_PT21_1_TEXT,x5_PT21_5_TEXT, na.rm = T))
GP3 <- GP2 %>%
rowwise() %>%
mutate(P1 = sum(x1_PT21_1_TEXT,x1_PT21_5_TEXT, na.rm = T)) %>%
mutate(P2 = sum(x2_PT21_1_TEXT,x2_PT21_5_TEXT, na.rm = T)) %>%
mutate(P3 = sum(x3_PT21_1_TEXT,x3_PT21_5_TEXT, na.rm = T)) %>%
mutate(P4 = sum(x4_PT21_1_TEXT,x4_PT21_5_TEXT, na.rm = T)) %>%
mutate(P5 = sum(x5_PT21_1_TEXT,x5_PT21_5_TEXT, na.rm = T))
View(GP3)
GP3 <- GP2 %>%
rowwise() %>%
mutate(P1 = sum(x1_PT21_1_TEXT:x1_PT21_5_TEXT, na.rm = T)) %>%
mutate(P2 = sum(x2_PT21_1_TEXT:x2_PT21_5_TEXT, na.rm = T)) %>%
mutate(P3 = sum(x3_PT21_1_TEXT:x3_PT21_5_TEXT, na.rm = T)) %>%
mutate(P4 = sum(x4_PT21_1_TEXT:x4_PT21_5_TEXT, na.rm = T)) %>%
mutate(P5 = sum(x5_PT21_1_TEXT:x5_PT21_5_TEXT, na.rm = T))
GP3 <- GP2 %>%
rowwise() %>%
mutate(P1 = sum(across(starts_with("x1")), na.rm = T)) %>%
mutate(P2 = sum(across(starts_with("x2")), na.rm = T)) %>%
mutate(P3 = sum(across(starts_with("x3")), na.rm = T)) %>%
mutate(P4 = sum(across(starts_with("x4")), na.rm = T)) %>%
mutate(P5 = sum(across(starts_with("x5")), na.rm = T)) %>%
mutate(P6 = sum(across(starts_with("x6")), na.rm = T)) %>%
mutate(P7 = sum(across(starts_with("x7")), na.rm = T)) %>%
GP2 <- as.numeric(GP2)
GP3 <- GP2 %>%
rowwise() %>%
mutate(P1 = sum(across(starts_with("x1")), na.rm = T)) %>%
mutate(P2 = sum(across(starts_with("x2")), na.rm = T)) %>%
mutate(P3 = sum(across(starts_with("x3")), na.rm = T)) %>%
mutate(P4 = sum(across(starts_with("x4")), na.rm = T)) %>%
mutate(P5 = sum(across(starts_with("x5")), na.rm = T)) %>%
mutate(P6 = sum(across(starts_with("x6")), na.rm = T)) %>%
mutate(P7 = sum(across(starts_with("x7")), na.rm = T)) %>%
GP2 <- read.csv("/Users/azimmer/Downloads/GP2.csv")
GP3 <- GP2 %>%
rowwise() %>%
mutate(P1 = sum(across(starts_with("x1")), na.rm = T)) %>%
mutate(P2 = sum(across(starts_with("x2")), na.rm = T)) %>%
mutate(P3 = sum(across(starts_with("x3")), na.rm = T)) %>%
mutate(P4 = sum(across(starts_with("x4")), na.rm = T)) %>%
mutate(P5 = sum(across(starts_with("x5")), na.rm = T)) %>%
mutate(P6 = sum(across(starts_with("x6")), na.rm = T)) %>%
mutate(P7 = sum(across(starts_with("x7")), na.rm = T))
GP3 <- select(GP3, P1, P2, P3, P4, P5, P6, P7)
GP4 <- rbind(GP3, GP2)
GP4 <- cbind(GP3, GP2)
View(GP4)
GP4 <- cbind(GP3, GP1)
colnames(GP4)
GP4 <- cbind(GP3, GP1) %>%
select(Q1.12.1_1, P1, Q1.12.1_2, P2, Q1.12.1_3, P3, Q1.12.1_4, P4, Q1.12.1_5, P5, Q1.12.1_6, P6, Q1.12.1_7, P7)
GP5 <- GP4 %>%
gather(Gender, NumPlace) %>%
mutate(NumPlace = as.numeric(NumPlace)))
GP5 <- GP4 %>%
gather(Gender, NumPlace) %>%
mutate(NumPlace = as.numeric(NumPlace))
View(GP5)
View(GP4)
GP3_long <- GP3 %>% gather(Px, NumPlace,)
View(GP3_long)
GP1_long <- GP1 %>% gather(Px, Gender,)
View(GP1_long)
GP4_long <- cbind(GP1_long, GP3_long)
View(GP4_long)
GP4_long <- cbind(GP1_long, GP3_long) %>%
select(Gender, NumPlace)
GP4_long <- cbind(GP1_long, GP3_long)
GP4_long <- cbind(GP1_long, GP3_long) %>%
select(Gender, NumPlace)
GP4_plotting <- GP4_long %>%
group_by(Gender) %>%
tally()
View(GP4_plotting)
View(GP4_long)
ggplot(GP4_long, aes(x = Gender)) +
geom_boxplot()
ggplot(GP4_long, aes(x = Gender, y = NumPlace)) +
geom_boxplot()
ggplot(GP4_long, aes(x = Gender, y = NumPlace)) +
geom_density()
GP4_plotting <- GP4_long %>%
group_by(Gender, NumPlace) %>%
tally()
View(GP4_plotting)
ggplot(GP4_long, aes(x = Gender, y = NumPlace)) +
geom_density()
ggplot(GP4_plotting, aes(x = NumPlace, y = n)) +
geom_boxplot() +
facet_wrap(~Gender)
ggplot(GP4_plotting, aes(x = NumPlace, y = n, group = Gender)) +
geom_boxplot() +
facet_wrap(~Gender)
ggplot(GP4_plotting, aes(x = NumPlace, y = n)) +
geom_boxplot(fill = Gender) +
facet_wrap(~Gender)
ggplot(GP4_plotting, aes(x = NumPlace, y = n)) +
geom_boxplot(fill = "Gender") +
facet_wrap(~Gender)
ggplot(GP4_plotting, aes(x = NumPlace, y = n, fill = "Gender")) +
geom_boxplot() +
facet_wrap(~Gender)
ggplot(GP4_plotting, aes(x = NumPlace, y = n, color = "Gender")) +
geom_boxplot() +
facet_wrap(~Gender)
ggplot(GP4_plotting, aes(x = NumPlace, y = n, color = Gender)) +
geom_boxplot() +
facet_wrap(~Gender)
ggplot(GP4_plotting, aes(x = NumPlace, y = n, fill = Gender)) +
geom_boxplot() +
facet_wrap(~Gender)
ggplot(GP4_plotting, aes(x = NumPlace, y = n, fill = Gender)) +
geom_boxplot()
ggplot(GP4_plotting, aes(x = NumPlace, y = n, fill = Gender)) +
geom_bar()
ggplot(GP4_plotting, aes(x = NumPlace, y = n, fill = Gender)) +
geom_bar(stat = "identity")
ggplot(GP4_plotting, aes(x = NumPlace, y = n, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge")
ggplot(GP4_plotting, aes(x = NumPlace, y = n, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
theme_bw()
ggplot(GP4_plotting, aes(x = NumPlace, y = n, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
theme_bw() +
labs(x = "Number of Places Visited", y = "Count")
#Plots
ggplot(GP4_long, aes(x = Gender, y = NumPlace)) +
geom_density()
GP1 <- read.csv("/Users/azimmer/Downloads/GP1.csv")
GP2 <- read.csv("/Users/azimmer/Downloads/GP2.csv")
GP3 <- GP2 %>%
rowwise() %>%
mutate(P1 = sum(across(starts_with("x1")), na.rm = T)) %>%
mutate(P2 = sum(across(starts_with("x2")), na.rm = T)) %>%
mutate(P3 = sum(across(starts_with("x3")), na.rm = T)) %>%
mutate(P4 = sum(across(starts_with("x4")), na.rm = T)) %>%
mutate(P5 = sum(across(starts_with("x5")), na.rm = T)) %>%
mutate(P6 = sum(across(starts_with("x6")), na.rm = T)) %>%
mutate(P7 = sum(across(starts_with("x7")), na.rm = T))
GP3 <- select(GP3, P1, P2, P3, P4, P5, P6, P7)
GP3_long <- GP3 %>% gather(Px, NumPlace,)
GP1_long <- GP1 %>% gather(Px, Gender,)
GP4_long <- cbind(GP1_long, GP3_long) %>%
select(Gender, NumPlace)
#Plots
ggplot(GP4_long, aes(x = Gender, y = NumPlace)) +
geom_density()
#Plots
ggplot(GP4_long, aes(x = Gender, y = NumPlace)) +
geom_boxplot()
#Plots
ggplot(GP4_long, aes(x = NumPlace)) +
geom_density() +
facet_wrap(~Gender)
#Plots
ggplot(GP4_long, aes(x = NumPlace)) +
geom_boxplot() +
facet_wrap(~Gender)
#Plots
ggplot(GP4_long, aes(x = NumPlace)) +
geom_boxplot() +
facet_wrap(~Gender)
#change data for plot2
GP4_plotting <- GP4_long %>%
group_by(Gender, NumPlace) %>%
tally()
ggplot(GP4_plotting, aes(x = NumPlace, y = n, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
theme_bw() +
labs(x = "Number of Places Visited", y = "Count")
GP4_cleaned <- GP4 %>% drop_na()
GP4_cleaned <- GP4_long %>% drop_na()
GP4_cleaned <- filter(GP4_cleaned, NumPlaces > 0)
GP4_cleaned <- filter(GP4_cleaned, NumPlace > 0)
#change data for plot2
GP4_plotting <- GP4_long %>%
group_by(Gender, NumPlace) %>%
tally()
#Plot again...
ggplot(GP4_cleaned, aes(x = NumPlace)) +
geom_boxplot() +
facet_wrap(~Gender)
#Plot again...
ggplot(GP4_cleaned, aes(x = NumPlace)) +
geom_density() +
facet_wrap(~Gender)
#change data for plot2
GP4_plotting <- GP4_long %>%
group_by(Gender, NumPlace) %>%
tally()
ggplot(GP4_plotting, aes(x = NumPlace, y = n, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
theme_bw() +
labs(x = "Number of Places Visited", y = "Count")
print("Hello World")
# Maize Price Analysis
# Andrew Zimmer
# March 2022
rm(list=ls()) #clear and close everything open
#### Loading Packages ####
library(tidyverse)
library(lubridate)
library(Amelia) #for multiple imputation
#### Loading Data ####
zambia_wfp_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/WFP Data/Raw/WFP_2022Feb28_Zambia_FoodPricesData.csv")
mozambique_wfp_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/WFP Data/Raw/WFP_2022Feb28_Mozambique_FoodPricesData.csv")
malawi_wfp_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/WFP Data/Raw/WFP_2022Feb28_Malawi_FoodPricesData.csv")
complete_wfp_raw <- rbind(zambia_wfp_raw, mozambique_wfp_raw, malawi_wfp_raw)
unique(complete_wfp_raw$Market)
complete_wfp_raw_date <- complete_wfp_raw %>%
select(Country, Admin.1, Market, Commodity, Year, Month, Price, Unit, Currency) %>%
mutate(Date = make_date(Year, Month))
#### Extract Maize Prices (all types) ####
maize_wfp_raw <- complete_wfp_raw_date[grepl("Maize", complete_wfp_raw_date$Commodity), ]
#remove maize price with SOS currency (error from WFP?)
maize_wfp_raw<-maize_wfp_raw[!(maize_wfp_raw$Currency=="SOS"),]
#retain certain country / maize type pairings
maize_wfp_raw<-maize_wfp_raw[(maize_wfp_raw$Country=="Malawi" & maize_wfp_raw$Commodity == "Maize" |
maize_wfp_raw$Country=="Mozambique" & maize_wfp_raw$Commodity == "Maize (white)" |
maize_wfp_raw$Country=="Zambia" & maize_wfp_raw$Commodity == "Maize (white)"),]
#clip data to start in 2003 and to end in 2019 (most complete record across all three countries)
maize_wfp_raw<-maize_wfp_raw[(maize_wfp_raw$Year >= 2003),]
maize_wfp_raw<-maize_wfp_raw[(maize_wfp_raw$Year <= 2019),]
#plot the number of markets through time
test <- maize_wfp_raw %>%
group_by(Country, Date) %>%
tally()
#plot the number of markets through time
ggplot(test, aes(x = date, y = n)) +
geom_line() +
facet_wrap(~Country) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Plot the maize price for each country through time, in local currency
ggplot(maize_wfp_raw, aes(x = date, y = Price, color = Commodity)) +
geom_line() +
facet_wrap(~Country) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "DATE", y = "PRICE /KG")
#### Convert raw WFP Prices to USD/Kg ####
currency_data <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/Exchange Rate Data/BIS_data.csv")
currency_data <- currency_data %>%
gather(Country, USD_conversion, Malawi:Zambia) %>%
mutate(Date = make_date(Year, Month))
# Plot the maize price for each country through time, in local currency
ggplot(maize_wfp_raw, aes(x = date, y = Price, color = Commodity)) +
geom_line() +
facet_wrap(~Country) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "DATE", y = "PRICE /KG")
# Maize Price Analysis
# Andrew Zimmer
# March 2022
rm(list=ls()) #clear and close everything open
#### Loading Packages ####
library(tidyverse)
library(lubridate)
#### Loading Data ####
zambia_wfp_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/WFP Data/Raw/WFP_2022Feb28_Zambia_FoodPricesData.csv")
mozambique_wfp_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/WFP Data/Raw/WFP_2022Feb28_Mozambique_FoodPricesData.csv")
malawi_wfp_raw <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/WFP Data/Raw/WFP_2022Feb28_Malawi_FoodPricesData.csv")
complete_wfp_raw <- rbind(zambia_wfp_raw, mozambique_wfp_raw, malawi_wfp_raw)
unique(complete_wfp_raw$Market)
complete_wfp_raw_date <- complete_wfp_raw %>%
select(Country, Admin.1, Market, Commodity, Year, Month, Price, Unit, Currency) %>%
mutate(Date = make_date(Year, Month))
#### Extract Maize Prices (all types) ####
maize_wfp_raw <- complete_wfp_raw_date[grepl("Maize", complete_wfp_raw_date$Commodity), ]
#remove maize price with SOS currency (error from WFP?)
maize_wfp_raw<-maize_wfp_raw[!(maize_wfp_raw$Currency=="SOS"),]
#retain certain country / maize type pairings
maize_wfp_raw<-maize_wfp_raw[(maize_wfp_raw$Country=="Malawi" & maize_wfp_raw$Commodity == "Maize" |
maize_wfp_raw$Country=="Mozambique" & maize_wfp_raw$Commodity == "Maize (white)" |
maize_wfp_raw$Country=="Zambia" & maize_wfp_raw$Commodity == "Maize (white)"),]
#clip data to start in 2003 and to end in 2019 (most complete record across all three countries)
maize_wfp_raw<-maize_wfp_raw[(maize_wfp_raw$Year >= 2003),]
maize_wfp_raw<-maize_wfp_raw[(maize_wfp_raw$Year <= 2019),]
#plot the number of markets through time
test <- maize_wfp_raw %>%
group_by(Country, Date) %>%
tally()
#plot the number of markets through time
ggplot(test, aes(x = date, y = n)) +
geom_line() +
facet_wrap(~Country) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(test)
#plot the number of markets through time
ggplot(test, aes(x = Date, y = n)) +
geom_line() +
facet_wrap(~Country) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Plot the maize price for each country through time, in local currency
ggplot(maize_wfp_raw, aes(x = date, y = Price, color = Commodity)) +
geom_line() +
facet_wrap(~Country) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "DATE", y = "PRICE /KG")
# Plot the maize price for each country through time, in local currency
ggplot(maize_wfp_raw, aes(x = Date, y = Price, color = Commodity)) +
geom_line() +
facet_wrap(~Country) +
scale_x_date(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "DATE", y = "PRICE /KG")
#### Convert raw WFP Prices to USD/Kg ####
currency_data <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/Exchange Rate Data/BIS_data.csv")
currency_data <- currency_data %>%
gather(Country, USD_conversion, Malawi:Zambia) %>%
mutate(Date = make_date(Year, Month))
currency_data <- dplyr::select(currency_data, Date, Country, USD_conversion)
maize_wfp_deflated <- merge(maize_wfp_raw, currency_data, by.x= c("Country", "Date"), by.y= c("Country", "Date"))
maize_wfp_deflated <- maize_wfp_deflated %>%
mutate(USD_Price = (Price/USD_conversion))
usa_cpi <- read.csv("/Users/azimmer/Documents/PhD Geography/Research/Zimmer - Maize Price/Inflation Data/CPI.csv")
#Format datetime
usa_cpi$Month <- as.integer(factor(usa_cpi$Month, levels = month.name))
usa_cpi <-   usa_cpi %>%
mutate(Date = make_date(Year, Month))
usa_cpi <- dplyr::select(usa_cpi, "Date", "Deflator")
colnames(usa_cpi) <- c("Date", "CPI_Deflator")
maize_wfp_deflated_USD <- merge(maize_wfp_deflated, usa_cpi, by =  "Date")
maize_wfp_deflated_USD <- maize_wfp_deflated_USD %>%
mutate(deflated_USD = (USD_Price * CPI_Deflator))
ggplot(maize_wfp_deflated_USD, aes(x = Date, y = deflated_USD)) +
geom_line() +
facet_wrap(~Country)
cleaned_wfp_data <- select(maize_wfp_deflated_USD, Date, Country, Market, deflated_USD)
colnames(cleaned_wfp_data) <- c("date", "country", "market", "usd_price")
# should be 204 observartions for each market (17 years)
# markets with > 100% of data available are errors, and will be removed from sample
unique(cleaned_wfp_data$market)
data_available <- cleaned_wfp_data %>%
group_by(country, market) %>%
summarise(non_na_count = sum(!is.na(usd_price))) %>%
mutate(percentage = (non_na_count/204)*100)
#### Filter data with 70-100% data available ####
useful_markets <-data_available[(data_available$percentage >=70 & data_available$percentage <=100),]
#keep only useful markets for imputation
useful_cleaned_wfp_data <- cleaned_wfp_data %>%
filter(market %in% useful_markets$market)
interpolated_test <- useful_cleaned_wfp_data %>%
group_by(market) %>%
na_interpolation()
library(imputeTS) #used for interpolation
interpolated_test <- useful_cleaned_wfp_data %>%
group_by(market) %>%
na_interpolation()
spline_test <- useful_cleaned_wfp_data %>%
group_by(market) %>%
na_interpolation(option = "spline")
kalman_test <- useful_cleaned_wfp_data %>%
group_by(market) %>%
na_kalman()
colnames(interpolated_test) <- c("date", "country", "market", "interpolated_usd_price", "time")
colnames(spline_test) <- c("date", "country", "market", "splined_usd_price", "time")
colnames(kalman_test) <- c("date", "country", "market", "kalman_usd_price", "time")
View(interpolated_test)
colnames(interpolated_test) <- c("date", "country", "market", "interpolated_usd_price")
colnames(spline_test) <- c("date", "country", "market", "splined_usd_price")
colnames(kalman_test) <- c("date", "country", "market", "kalman_usd_price")
test_df <- merge(useful_cleaned_wfp_data, interpolated_test, by = c("date", "country", "market"))
test_df <- merge(test_df, spline_test, by = c("date", "country", "market"))
test_df <- merge(test_df, kalman_test, by = c("date", "country", "market"))
View(test_df)
test_df_selected <- test_df %>%
filter(market %in% c("Bvumbwe", "Lilongwe", "Nkhotakota"))
ggplot(test_df, aes(x = date)) +
geom_line(aes(y = usd_price), color = 'black', size = 3) +
geom_line(aes(y = interpolated_usd_price), color = 'red', size =1) +
facet_wrap(~market)
