legend.position = "right", legend.key.height = unit(0.7, "cm")) +
scale_fill_manual(values = mycolors, na.value="grey")
county_plot
rm(list=ls()) #clear and close
library(googlesheets4)
library(tidyverse)
library(usmap)
library(dplyr)
library(urbnmapr)
library(tidygeocoder)
library(sf)
library(ggsflabel)
library(ggpubr)
library(scales)
library(cowplot)
library(viridis)
library(RColorBrewer)
rm(list=ls()) #clear and close
library(googlesheets4)
library(tidyverse)
library(usmap)
library(dplyr)
library(urbnmapr)
library(tidygeocoder)
library(sf)
library(ggsflabel)
library(ggpubr)
library(scales)
library(cowplot)
library(viridis)
library(RColorBrewer)
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
1
city_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Cities")
# select useful columns for plotting by county FIPS and rename
county_npi_data <- dplyr::select(county_npi_data, "CTY_ST_FIPS", "State...7", "County", "Status", "Date Last Coded")
colnames(county_npi_data) <- c("fips", "state", "county", "status", "date_coded")
county_npi_data$status <- as.character(county_npi_data$status)
county_npi_data$date_coded <- as.Date(county_npi_data$date_coded)
#change last coded date to month/year only
county_npi_data$date_coded <- format(county_npi_data$date_coded, "%m/%Y")
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
library(qualtRics)
library(tidyverse)
library(reshape2)
library(RColorBrewer)
library(rnaturalearth)
library(sf)
library(ggmap)
library(cowplot)
library(ggpubr)
rm(list=ls()) #clear and close everything open
#### Import Survey Data ####
#set up qualtrics API
#qualtrics_api_credentials(api_key = "XNImZqJh7u1XerPh6vGkomdMdo1N36zXLsYDL3EN",
#                          base_url = "uarizona.iad1.qualtrics.com",
#                          install = TRUE)
#view all surveys in qualtrics
#all_surveys()
#fetch survey from qualtrics API
raw_qualtrics <- fetch_survey(surveyID = "SV_5naRTf4LMSp9bEO", force_request = TRUE)
#remove duplicated surveys (except one instance)
raw_qualtrics <- raw_qualtrics[!rev(duplicated(rev(raw_qualtrics$Q1.3))),]
#### Change town name from ITT to Namwala
namwala_hhid <- list(1452, 1454, 1456, 1457, 1458, 1459, 1461, 1463, 1467, 1469, 1472, 1475, 1476, 1478, 1480, 1485, 1486, 1487, 1489, 1495, 1496, 1497, 1503,
1504, 1505, 1508, 1513, 1514, 1518, 1521, 1522, 1523, 1525, 1527, 1528, 1532, 1533, 1534, 1535, 1538, 1539, 1540, 1542, 1543, 1544, 1546,
1555, 1556, 1558, 1560, 1625, 1632, 1676, 1679, 1684, 1685, 1686, 1687, 1688, 1689, 1692, 1693, 1451, 1453, 1455, 1460, 1462, 1464, 1465,
1466, 1468, 1470, 1471, 1473, 1474, 1477, 1479, 1481, 1482, 1483, 1484, 1488, 1494, 1498, 1499, 1500, 1501, 1502, 1506, 1507, 1509, 1510,
1511, 1512, 1515, 1516, 1517, 1519, 1520, 1524, 1526, 1529, 1530, 1531, 1536, 1537, 1541, 1545, 1557, 1559, 1619, 1620, 1621, 1622, 1623,
1624, 1673, 1674, 1675, 1677, 1678, 1680, 1681, 1682, 1683, 1690, 1691, 1694)
raw_qualtrics$town_correct <- as.numeric(raw_qualtrics$Q1.3 %in% namwala_hhid)
raw_qualtrics$Q1.5[raw_qualtrics$town_correct == 1] <- "Namwala"
#### Plot number of surveys by town ####
#select question with town
town_info <- dplyr::select(raw_qualtrics, "Q1.5")
#calculate count by town
town_info <- town_info %>%
group_by(Q1.5) %>%
tally()
#remove NA values, keep those that are complete (No, NA's)
town_info <- town_info[complete.cases(town_info), ]
count <- as.numeric(sum(town_info$n))
town_info$Q1.5 <- factor(town_info$Q1.5, levels = c("Pemba", "Mbabala", "Mpongwe", "Batoka", "Petauke", "Namwala",
"Nyimba", "Maamba", "Chongwe", "Itezhi-Tezhi", "Mkushi",
"Mazabuka", "Kapiri Mposhi", "Choma"))
town_info$available <- c(19,156,84,48,93,44,93,14,76,43,57,40,27,67)
town_info_long <- gather(town_info, variable, value, n:available, factor_key = T)
town_plot <- ggplot(town_info_long, aes(x = Q1.5, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
theme_bw() +
labs(x = "", y = "# Completed Surveys",fill = "", title = paste("Total Surveys Completed =", count)) +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=15)) +
scale_y_continuous(limits = c(0,160), breaks = seq(0, 160, by = 20)) +
scale_fill_manual(values = c("steelblue", "salmon"), labels = c("Completed", "Available"))
town_plot
#surveys by day
surveys_day <- dplyr::select(raw_qualtrics, "RecordedDate", "Q1.4")
surveys_day$RecordedDate <- as.Date(surveys_day$RecordedDate, format = "%Y%m%d")
surveys_day <- surveys_day %>%
group_by(RecordedDate, Q1.4) %>%
tally()
survey_day_plot <- ggplot(surveys_day, aes(x = RecordedDate, y = n, fill = Q1.4)) +
geom_bar(stat = "identity") +
theme_bw() +
scale_fill_brewer(palette = "Pastel1") +
labs(x = "DATE", y= "COUNT", fill = "Enumerator", title = paste("Total Surveys Completed =", count))
survey_day_plot
ggarrange(town_plot, survey_day_plot, nrow = 2, ncol = 1)
rm(list=ls()) #clear and close
library(googlesheets4)
library(tidyverse)
library(usmap)
library(dplyr)
library(urbnmapr)
library(tidygeocoder)
library(sf)
library(ggsflabel)
library(ggpubr)
library(scales)
library(cowplot)
library(viridis)
library(RColorBrewer)
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
(original_app <- gs4_oauth_app())
gs4_deauth()
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
gs4_auth(
email = gargle::gargle_oauth_email(),
path = NULL,
scopes = "https://www.googleapis.com/auth/spreadsheets",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL
)
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
(original_api_key <- gs4_api_key())
# bring your own app via client id (aka key) and secret
google_app <- httr::oauth_app(
"my-awesome-google-api-wrapping-package",
key = "YOUR_CLIENT_ID_GOES_HERE",
secret = "YOUR_SECRET_GOES_HERE"
)
sheets_auth(
email = gargle::gargle_oauth_email(),
path = NULL,
scopes = "https://www.googleapis.com/auth/spreadsheets",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL
)
library(googlesheets4)
library(tidyverse)
library(usmap)
library(dplyr)
library(urbnmapr)
library(tidygeocoder)
library(sf)
library(ggsflabel)
library(ggpubr)
library(scales)
library(cowplot)
library(viridis)
library(RColorBrewer)
sheets_auth(
email = gargle::gargle_oauth_email(),
path = NULL,
scopes = "https://www.googleapis.com/auth/spreadsheets",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL
)
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
sheets_auth(
email = gargle::gargle_oauth_email(),
path = NULL,
scopes = "https://www.googleapis.com/auth/spreadsheets",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL
)
sheets_auth(email = "azimmer@email.arizona.edu")
library(googlesheets4)
sheets_auth(email = "azimmer@email.arizona.edu")
rm(list=ls()) #clear and close
library(googlesheets4)
library(tidyverse)
library(usmap)
library(dplyr)
library(urbnmapr)
library(tidygeocoder)
library(sf)
library(ggsflabel)
library(ggpubr)
library(scales)
library(cowplot)
library(viridis)
library(RColorBrewer)
sheets_auth(email = "azimmer@email.arizona.edu")
sheets_auth(email = "azimmer@email.arizona.edu")
sheets_deauth()
googlesheets4::sheets_auth()
googlesheets4::sheets_auth(email = "azimmer@email.arizona.edu")
library(askpass)
googlesheets4::sheets_auth(email = "azimmer@email.arizona.edu")
install.packages("askpass")
install.packages("askpass")
library(askpass)
googlesheets4::sheets_auth(email = "azimmer@email.arizona.edu")
googlesheets4::sheets_auth(email = "azimmer@email.arizona.edu")
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
1
# select useful columns for plotting by county FIPS and rename
county_npi_data <- dplyr::select(county_npi_data, "CTY_ST_FIPS", "State...7", "County", "Status", "Date Last Coded")
colnames(county_npi_data) <- c("fips", "state", "county", "status", "date_coded")
county_npi_data$status <- as.character(county_npi_data$status)
county_npi_data$date_coded <- as.Date(county_npi_data$date_coded)
#change last coded date to month/year only
county_npi_data$date_coded <- format(county_npi_data$date_coded, "%m/%Y")
#change date to categorical variable
county_npi_data$date_coded <- as.factor(county_npi_data$date_coded)
#reorder factor levels so they plot nicely in date order
county_npi_data$date_coded <- factor(county_npi_data$date_coded, levels = c("04/2020", "05/2020", "06/2020", "07/2020", "08/2020",
"09/2020", "10/2020", "11/2020", "12/2020", "01/2021",
"02/2021", "03/2021", "04/2021", "05/2021", "06/2021",
"07/2021", "08/2021", "09/2021"))
# Obtain county polygon data
states_sf <- get_urbn_map(map = "states", sf = TRUE)
counties_sf <- get_urbn_map(map = "counties", sf = TRUE)
# Merge polygonal data with coded data
counties_sf <- merge(counties_sf, county_npi_data, by.x = "county_fips", by.y = "fips")
# set colors for plot
nb.cols <- 17
mycolors <- colorRampPalette(brewer.pal(8, "RdYlGn"))(nb.cols)
# Plot county level data
county_plot <- ggplot() +
# Plot county data and fill with value
geom_sf(data=counties_sf, mapping = aes(fill = date_coded), color = 'grey65', size = 0.1) +
# Overlay State Outlines
geom_sf(data = states_sf, fill = NA, color = "grey20", size = 0.2) +
# Remove grid lines from plot
coord_sf(datum = NA) +
labs(fill = "Date Last Coded") +
theme(plot.background = element_rect(color = "NA"),
legend.background = element_rect(color = "NA"),
legend.position = "right", legend.key.height = unit(0.7, "cm")) +
scale_fill_manual(values = mycolors, na.value="grey")
county_plot
# Read in progress tracking sheet from google drive
county_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Counties")
1
city_npi_data <- read_sheet("https://docs.google.com/spreadsheets/d/1-kbRNzOiLIbQAYpumOQoyMUFFTlCmwKdiFgzRTlY4Tc/edit?usp=sharing",
sheet = "US Cities")
# select useful columns for plotting by county FIPS and rename
county_npi_data <- dplyr::select(county_npi_data, "CTY_ST_FIPS", "State...7", "County", "Status", "Date Last Coded")
colnames(county_npi_data) <- c("fips", "state", "county", "status", "date_coded")
county_npi_data$status <- as.character(county_npi_data$status)
county_npi_data$date_coded <- as.Date(county_npi_data$date_coded)
#change last coded date to month/year only
county_npi_data$date_coded <- format(county_npi_data$date_coded, "%m/%Y")
#change date to categorical variable
county_npi_data$date_coded <- as.factor(county_npi_data$date_coded)
#reorder factor levels so they plot nicely in date order
county_npi_data$date_coded <- factor(county_npi_data$date_coded, levels = c("04/2020", "05/2020", "06/2020", "07/2020", "08/2020",
"09/2020", "10/2020", "11/2020", "12/2020", "01/2021",
"02/2021", "03/2021", "04/2021", "05/2021", "06/2021",
"07/2021", "08/2021", "09/2021", "10/2021"))
# Obtain county polygon data
states_sf <- get_urbn_map(map = "states", sf = TRUE)
counties_sf <- get_urbn_map(map = "counties", sf = TRUE)
# Merge polygonal data with coded data
counties_sf <- merge(counties_sf, county_npi_data, by.x = "county_fips", by.y = "fips")
# set colors for plot
nb.cols <- 17
mycolors <- colorRampPalette(brewer.pal(8, "RdYlGn"))(nb.cols)
# Plot county level data
county_plot <- ggplot() +
# Plot county data and fill with value
geom_sf(data=counties_sf, mapping = aes(fill = date_coded), color = 'grey65', size = 0.1) +
# Overlay State Outlines
geom_sf(data = states_sf, fill = NA, color = "grey20", size = 0.2) +
# Remove grid lines from plot
coord_sf(datum = NA) +
labs(fill = "Date Last Coded") +
theme(plot.background = element_rect(color = "NA"),
legend.background = element_rect(color = "NA"),
legend.position = "right", legend.key.height = unit(0.7, "cm")) +
scale_fill_manual(values = mycolors, na.value="grey")
county_plot
library(shiny)
ui <- fluidPage(
"Hello, world!"
)
rm(list=ls()) #clear and close everything open
ui <- fluidPage(
"Hello, world!"
)
ui <- fluidPage("Hello, world!")
server <- function(input, output, session) {}
shinyApp(ui, server)
ui <- fluidPage(selectInput("dataset",
label = "Dataset",
choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table"))
server <- function(input, output, session) {}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("dataset",
label = "Dataset",
choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table"))
server <- function(input, output, session) {}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("dataset",
label = "Dataset",
choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table"))
server <- function(input, output, session) {
output$summary <- renderPrint({
dataset <- get(input$dataset, "package:datasets")
summary(dataset)
})
output$table <- renderTable({
dataset <- get(input$dataset, "package:datasets")
dataset
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("dataset",
label = "Dataset",
choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table"))
server <- function(input, output, session) {
# Create a reactive expression
dataset <- reactive({
get(input$dataset, "package:datasets")
})
output$summary <- renderPrint({
# Use a reactive expression by calling it like a function
summary(dataset())
})
output$table <- renderTable({
dataset()
})
}
shinyApp(ui, server)
output$histogram <- renderPlot({
hist(rnorm(1000))
}, res = 96)
server <- function(input, output, session) {
# Create a reactive expression
dataset <- reactive({
get(input$dataset, "package:datasets")
})
output$summary <- renderPrint({
# Use a reactive expression by calling it like a function
summary(dataset())
})
output$table <- renderTable({
dataset()
})
}
shinyApp(ui, server)
label = "Dataset",
verbatimTextOutput("summary"),
output$greeting <- renderText({
paste0("Hello ", input$name)
})
numericInput("age", "How old are you?", value = NA)
ui <- fluidPage(
selectInput("dataset",
label = "Dataset",
choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("mortgage")
output$greeting <- renderText({
paste0("Hello ", input$name)
})
numericInput("age", "How old are you?", value = NA)
textInput("name", "What's your name?")
textOutput("greeting")
output$histogram <- renderPlot({
hist(rnorm(1000))
}, res = 96))
server <- function(input, output, session) {
# Create a reactive expression
dataset <- reactive({
get(input$dataset, "package:datasets")
})
output$summary <- renderPrint({
# Use a reactive expression by calling it like a function
summary(dataset())
})
output$table <- renderTable({
dataset()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("dataset",
label = "Dataset",
choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("mortgage")
output$greeting <- renderText({
paste0("Hello ", input$name)
})
numericInput("age", "How old are you?", value = NA)
textInput("name", "What's your name?")
textOutput("greeting")
output$histogram <- renderPlot({
hist(rnorm(1000))
}, res = 96))
ui <- fluidPage(
selectInput("dataset",
label = "Dataset",
choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("mortgage")
output$greeting <- renderText({
paste0("Hello ", input$name)
})
numericInput("age", "How old are you?", value = NA)
textInput("name", "What's your name?")
textOutput("greeting")
output$histogram <- renderPlot({
hist(rnorm(1000))
}, res = 96))
output$histogram <- renderPlot({
hist(rnorm(1000))
}, res = 96)
tableOutput("mortgage")
paste0("Hello ", input$name)
output$greeting <- renderText({
paste0("Hello ", input$name)
})
ui <- fluidPage(
selectInput("dataset",
label = "Dataset",
choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("mortgage"))
output$greeting <- renderText({
paste0("Hello ", input$name))
})
output$greeting <- renderText({
paste0("Hello ", input$name)})
ui <- fluidPage(
selectInput("dataset",
label = "Dataset",
choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("mortgage"))
output$greeting <- renderText({
paste0("Hello ", input$name)})
verbatimTextOutput("summary"),
tableOutput("mortgage")
output$greeting <- renderText({
paste0("Hello ", input$name)
})
selectInput("dataset",
choices = ls("package:datasets")),
tableOutput("table")
tableOutput("mortgage")
output$greeting <- renderText({
paste0("Hello ", input$name)
})
numericInput("age", "How old are you?", value = NA)
textInput("name", "What's your name?")
textOutput("greeting")
output$histogram <- renderPlot({
hist(rnorm(1000))
}, res = 96)
server <- function(input, output, session) {
output$summary <- renderPrint({
dataset <- get(input$dataset, "package:datasets")
summary(dataset)
})
output$table <- renderTable({
dataset <- get(input$dataset, "package:datasets")
dataset
})
}
shinyApp(ui, server)
